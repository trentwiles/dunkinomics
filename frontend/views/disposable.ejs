<!DOCTYPE html>
<html>

<head>
    <%- include('header.ejs'); %>
</head>

<body>
    <!-- extra style for tab on map -->
    <style>
        .info {
            padding: 6px 8px;
            font: 14px/16px Arial, Helvetica, sans-serif;
            background: white;
            background: rgba(255, 255, 255, 0.8);
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
            border-radius: 5px;
        }

        .info h4 {
            margin: 0 0 5px;
            color: #777;
        }

        .legend {
            text-align: left;
            line-height: 18px;
            color: #555;
        }

        .legend i {
            width: 18px;
            height: 18px;
            float: left;
            margin-right: 8px;
            opacity: 0.7;
        }
    </style>
    <div id="map"></div>
    <script>

        $.get("dispose.json", function (statesData) {


            const map = L.map('map').setView([37.8, -96], 4);

            const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(map);

            // control that shows state info on hover
            const info = L.control();

            info.onAdd = function (map) {
                this._div = L.DomUtil.create('div', 'info');
                this.update();
                return this._div;
            };

            info.update = function (props) {
                if(props){
                    if(props.density == -1){
                        density = "No Dunkin Locations"
                    }else{
                        density = props.density
                    }
                }
                const contents = props ? `<b>${props.name}</b><br />${density} â˜•` : 'Hover over a state';
                this._div.innerHTML = `<h4>Iced Coffees per Disposable Income</h4>${contents}`;
            };

            info.addTo(map);


            // get color depending on population density value
            function getColor(d) {
                return d > 11000 ? '#800026' :
                    d > 10000 ? '#BD0026' :
                        d > 9000 ? '#E31A1C' :
                            d > 8000 ? '#FC4E2A' :
                                d > 7000 ? '#FD8D3C' :
                                    d > 6000 ? '#FEB24C' :
                                        // color for -1 error result, white
                                        d > -2 ? '' : '';
            }

            function style(feature) {
                return {
                    weight: 2,
                    opacity: 1,
                    color: 'white',
                    dashArray: '3',
                    fillOpacity: 0.7,
                    fillColor: getColor(feature.properties.density)
                };
            }

            function highlightFeature(e) {
                const layer = e.target;

                layer.setStyle({
                    weight: 5,
                    color: '#666',
                    dashArray: '',
                    fillOpacity: 0.7
                });

                layer.bringToFront();

                info.update(layer.feature.properties);
            }

            /* global statesData */
            const geojson = L.geoJson(statesData, {
                style,
                onEachFeature
            }).addTo(map);

            function resetHighlight(e) {
                geojson.resetStyle(e.target);
                info.update();
            }

            function zoomToFeature(e) {
                map.fitBounds(e.target.getBounds());
            }

            function onEachFeature(feature, layer) {
                layer.on({
                    mouseover: highlightFeature,
                    mouseout: resetHighlight,
                    click: zoomToFeature
                });
            }

            const legend = L.control({ position: 'bottomright' });

            legend.onAdd = function (map) {

                const div = L.DomUtil.create('div', 'info legend');
                const grades = [-1, 0, 1, 2, 3, 4, 5];
                const labels = [];
                let from, to;

                for (let i = 0; i < grades.length; i++) {
                    from = grades[i];
                    to = grades[i + 1];

                    labels.push(`<i style="background:${getColor(from + 1)}"></i> ${from}${to ? `&ndash;${to}` : '+'}`);
                }

                div.innerHTML = labels.join('<br>');
                return div;
            };

            legend.addTo(map);
        });
    </script>
</body>
<footer>
    <%- include('footer.ejs'); %>
</footer>

</html>